{"version":3,"sources":["./node_modules/br-mask/dist/app.module.js","./node_modules/br-mask/dist/directives/br-mask.js","./node_modules/br-mask/dist/directives/index.js","./node_modules/br-mask/dist/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACkB;AACV;AACvD;AACA;AACA;AACA;AACA,CAAC;AACyB;AAC1B;AACA,KAAK,OAAO,sDAAQ;AACpB;AACA,oBAAoB,mEAAe;AACnC;AACA;AACA,oBAAoB,mEAAe;AACnC;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA,oBAAoB,oEAAsB;AAC1C;AACA,aAAa,IAAI;AACjB;AACA;AACA,6CAA6C,WAAW;AACxD,sC;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAiH;AAChD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA,0CAA0C,0DAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,YAAY;AAC1B,gBAAgB,OAAO;AACvB;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA,uGAAuG,EAAE,QAAQ,EAAE;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA,sCAAsC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AAC7D;AACA;AACA,sCAAsC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,YAAY;AAC1B,gBAAgB,OAAO;AACvB;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD,+CAA+C,EAAE,KAAK,IAAI;AAC1D,+CAA+C,EAAE,KAAK,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE;AACjD,+CAA+C,EAAE;AACjD,+CAA+C,EAAE,KAAK,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,YAAY;AAC1B,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,sCAAsC,uBAAuB;AAClG;AACA;AACA;AACA,mCAAmC,EAAE,+BAA+B,EAAE,sCAAsC,uBAAuB;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;AAC3B;AACA,KAAK,OAAO,uDAAS;AACrB;AACA,aAAa,IAAI;AACjB,KAAK,OAAO,wDAAU,EAAE;AACxB;AACA;AACA,8CAA8C;AAC9C,KAAK,OAAO,iEAAkB,gBAAgB,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG,OAAO,sDAAQ,EAAE,IAAI;AACvG,KAAK,OAAO,wDAAU,GAAG;AACzB,EAAE;AACF;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,yBAAyB,OAAO,mDAAK,EAAE;AACvC,oBAAoB,OAAO,0DAAY,gCAAgC;AACvE;AACA,mC;;;;;;;;;;;;ACrcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AAC1B,iC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6B;AACA;AAC7B,iC","file":"default~pages-profile-profile-module~pages-register-register-module~pages-waist-measure-waist-measure-module-es2015.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { BrMaskDirective } from './directives/br-mask';\nvar BrMaskerModule = (function () {\n    function BrMaskerModule() {\n    }\n    return BrMaskerModule;\n}());\nexport { BrMaskerModule };\nBrMaskerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    BrMaskDirective\n                ],\n                exports: [\n                    BrMaskDirective\n                ],\n                imports: [\n                    CommonModule\n                ],\n                schemas: [\n                    CUSTOM_ELEMENTS_SCHEMA\n                ]\n            },] },\n];\n/** @nocollapse */\nBrMaskerModule.ctorParameters = function () { return []; };\n//# sourceMappingURL=app.module.js.map","import { Directive, ElementRef, Host, HostListener, Injectable, Input, Optional, SkipSelf } from '@angular/core';\nimport { FormControl, FormGroupDirective } from '@angular/forms';\nvar BrMaskModel = (function () {\n    function BrMaskModel() {\n        this.type = 'alfa';\n        this.decimal = 2;\n        this.decimalCaracter = \",\";\n        this.userCaracters = false;\n        this.numberAndTousand = false;\n        this.moneyInitHasInt = true;\n    }\n    return BrMaskModel;\n}());\nexport { BrMaskModel };\nvar BrMaskDirective = (function () {\n    function BrMaskDirective(controlContainer, elementRef) {\n        this.controlContainer = controlContainer;\n        this.elementRef = elementRef;\n        this.brmasker = new BrMaskModel();\n    }\n    /**\n    * Event key up in directive\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @constant {string} value\n    */\n    BrMaskDirective.prototype.inputKeyup = function (event) {\n        var value = this.returnValue(event.target.value);\n        this.setValueInFormControl(value);\n    };\n    BrMaskDirective.prototype.ngOnInit = function () {\n        if (!this.brmasker.type) {\n            this.brmasker.type = 'all';\n        }\n        if (!this.brmasker.decimal) {\n            this.brmasker.decimal = 2;\n        }\n        if (this.brmasker.moneyInitHasInt === undefined) {\n            this.brmasker.moneyInitHasInt = true;\n        }\n        if (!this.brmasker.decimalCaracter) {\n            this.brmasker.decimalCaracter = ',';\n        }\n        if (this.controlContainer) {\n            if (this.formControlName) {\n                this.brmasker.form = this.controlContainer.control.get(this.formControlName);\n            }\n            else {\n                console.warn('Missing FormControlName directive from host element of the component');\n            }\n        }\n        else {\n            console.warn('Can\\'t find parent FormGroup directive');\n        }\n        this.initialValue();\n    };\n    BrMaskDirective.prototype.initialValue = function () {\n        var value = this.returnValue(this.elementRef.nativeElement.value);\n        this.setValueInFormControl(value);\n    };\n    /**\n    * The verification of form\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.verifyFormControl()</caption>\n    * @returns {boolean} return a boolean value\n    */\n    BrMaskDirective.prototype.verifyFormControl = function () {\n        if (this.brmasker.form instanceof FormControl) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n    * Set Value em FormControl\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.setValueInFormControl(string)</caption>\n    */\n    BrMaskDirective.prototype.setValueInFormControl = function (value) {\n        if (!this.verifyFormControl()) {\n            this.elementRef.nativeElement.value = value;\n            return;\n        }\n        this.brmasker.form.setValue(value);\n        this.brmasker.form.updateValueAndValidity();\n    };\n    /**\n    * For initial value\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.setValueInFormControl(string, model)</caption>\n    * @param {string} value\n    * @param {BrMaskModel} config\n    * @returns {string} mask intial value\n    */\n    BrMaskDirective.prototype.writeCreateValue = function (value, config) {\n        if (config === void 0) { config = new BrMaskModel(); }\n        if (value && config.phone) {\n            return value.replace(/^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/gi, '$1 ($2) $3-$4');\n        }\n        if (value && config.phoneNotDDD) {\n            return this.phoneNotDDDMask(value);\n        }\n        if (value && config.money) {\n            return this.writeValueMoney(value, config);\n        }\n        if (value && config.person) {\n            return this.writeValuePerson(value);\n        }\n        if (value && config.percent) {\n            return this.writeValuePercent(value);\n        }\n        if (this.brmasker.userCaracters) {\n            return this.usingSpecialCharacters(value, this.brmasker.mask, this.brmasker.len);\n        }\n        if (value && config.mask) {\n            this.brmasker.mask = config.mask;\n            if (config.len) {\n                this.brmasker.len = config.len;\n            }\n            return this.onInput(value);\n        }\n        return value;\n    };\n    /**\n    * For initial value percent\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.writeValuePercent(string)</caption>\n    * @param {string} value\n    * @returns {string} mask intial value\n    */\n    BrMaskDirective.prototype.writeValuePercent = function (value) {\n        value.replace(/\\D/gi, '');\n        value.replace(/%/gi, '');\n        return value.replace(/([0-9]{0})$/gi, '%$1');\n    };\n    /**\n    * For initial value person\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.writeValuePerson(string)</caption>\n    * @param {string} value\n    * @returns {string} mask intial value\n    */\n    BrMaskDirective.prototype.writeValuePerson = function (value) {\n        if (value.length <= 11) {\n            return value.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/gi, '\\$1.\\$2.\\$3\\-\\$4');\n        }\n        else {\n            return value.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/gi, '\\$1.\\$2.\\$3\\/\\$4\\-\\$5');\n        }\n    };\n    /**\n    * For initial value money\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.writeValueMoney(string, model)</caption>\n    * @param {string} value\n    * @param {BrMaskModel} value\n    * @returns {string} mask intial value\n    */\n    BrMaskDirective.prototype.writeValueMoney = function (value, config) {\n        if (config === void 0) { config = new BrMaskModel(); }\n        return this.moneyMask(value, config);\n    };\n    /**\n    * Here is one of the main functions\n    * responsible for identifying the type of mask\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.returnValue(string)</caption>\n    * @param {string} value\n    * @returns {string} mask value\n    */\n    BrMaskDirective.prototype.returnValue = function (value) {\n        if (!this.brmasker.mask) {\n            this.brmasker.mask = '';\n        }\n        if (value) {\n            var formValue = value;\n            if (this.brmasker.type === 'alfa') {\n                formValue = formValue.replace(/\\d/gi, '');\n            }\n            if (this.brmasker.type === 'num') {\n                formValue = formValue.replace(/\\D/gi, '');\n            }\n            if (this.brmasker.money) {\n                return this.moneyMask(this.onInput(formValue), this.brmasker);\n            }\n            if (this.brmasker.phone) {\n                return this.phoneMask(formValue);\n            }\n            if (this.brmasker.phoneNotDDD) {\n                return this.phoneNotDDDMask(formValue);\n            }\n            if (this.brmasker.person) {\n                return this.peapollMask(formValue);\n            }\n            if (this.brmasker.percent) {\n                return this.percentMask(formValue);\n            }\n            if (this.brmasker.numberAndTousand) {\n                return this.thousand(formValue);\n            }\n            if (this.brmasker.userCaracters) {\n                return this.usingSpecialCharacters(formValue, this.brmasker.mask, this.brmasker.len);\n            }\n            return this.onInput(formValue);\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n    * Here we have a mask for percentage\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.percentMask(string)</caption>\n    * @param {string} value\n    * @returns {string} string percentage\n    */\n    BrMaskDirective.prototype.percentMask = function (value) {\n        var tmp = value;\n        tmp = tmp.replace(/\\D/gi, '');\n        tmp = tmp.replace(/%/gi, '');\n        tmp = tmp.replace(/([0-9]{0})$/gi, '%$1');\n        return tmp;\n    };\n    /**\n    * Here we have a mask for phone in 8 digits or 9 digits\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.phoneMask(string)</caption>\n    * @param {string} value\n    * @returns {string} string phone\n    */\n    BrMaskDirective.prototype.phoneMask = function (value) {\n        var formValue = value;\n        if (formValue.length > 14 || formValue.length === 11) {\n            this.brmasker.len = 15;\n            this.brmasker.mask = '(99) 99999-9999';\n            formValue = formValue.replace(/\\D/gi, '');\n            formValue = formValue.replace(/(\\d{2})(\\d)/gi, '$1 $2');\n            formValue = formValue.replace(/(\\d{5})(\\d)/gi, '$1-$2');\n            formValue = formValue.replace(/(\\d{4})(\\d)/gi, '$1$2');\n        }\n        else {\n            this.brmasker.len = 14;\n            this.brmasker.mask = '(99) 9999-9999';\n            formValue = formValue.replace(/\\D/gi, '');\n            formValue = formValue.replace(/(\\d{2})(\\d)/gi, '$1 $2');\n            formValue = formValue.replace(/(\\d{4})(\\d)/gi, '$1-$2');\n            formValue = formValue.replace(/(\\d{4})(\\d)/gi, '$1$2');\n        }\n        return this.onInput(formValue);\n    };\n    /**\n    * Here we have a mask for phone in 8 digits or 9 digits not ddd\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.phoneMask(string)</caption>\n    * @param {string} value\n    * @returns {string} string phone\n    */\n    BrMaskDirective.prototype.phoneNotDDDMask = function (value) {\n        var formValue = value;\n        if (formValue.length > 9) {\n            this.brmasker.len = 10;\n            this.brmasker.mask = '99999-9999';\n            formValue = formValue.replace(/\\D/gi, '');\n            formValue = formValue.replace(/(\\d{5})(\\d)/gi, '$1-$2');\n            formValue = formValue.replace(/(\\d{4})(\\d)/gi, '$1$2');\n        }\n        else {\n            this.brmasker.len = 9;\n            this.brmasker.mask = '9999-9999';\n            formValue = formValue.replace(/\\D/gi, '');\n            formValue = formValue.replace(/(\\d{4})(\\d)/gi, '$1-$2');\n            formValue = formValue.replace(/(\\d{4})(\\d)/gi, '$1$2');\n        }\n        return this.onInput(formValue);\n    };\n    /**\n    * Here we have a mask for peapoll ID\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.peapollMask(string)</caption>\n    * @param {string} value\n    * @returns {string} string ID\n    */\n    BrMaskDirective.prototype.peapollMask = function (value) {\n        var formValue = value;\n        if (formValue.length > 14) {\n            this.brmasker.len = 18;\n            this.brmasker.mask = '99.999.999/9999-99';\n            formValue = formValue.replace(/\\D/gi, '');\n            formValue = formValue.replace(/(\\d{2})(\\d)/gi, '$1.$2');\n            formValue = formValue.replace(/(\\d{3})(\\d)/gi, '$1.$2');\n            formValue = formValue.replace(/(\\d{3})(\\d)/gi, '$1/$2');\n            formValue = formValue.replace(/(\\d{4})(\\d{1,4})$/gi, '$1-$2');\n            formValue = formValue.replace(/(\\d{2})(\\d{1,2})$/gi, '$1$2');\n        }\n        else {\n            this.brmasker.len = 14;\n            this.brmasker.mask = '999.999.999-99';\n            formValue = formValue.replace(/\\D/gi, '');\n            formValue = formValue.replace(/(\\d{3})(\\d)/gi, '$1.$2');\n            formValue = formValue.replace(/(\\d{3})(\\d)/gi, '$1.$2');\n            formValue = formValue.replace(/(\\d{3})(\\d{1,2})$/gi, '$1-$2');\n        }\n        return this.onInput(formValue);\n    };\n    /**\n    * Here we have a mask for money mask\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.moneyMask(string)</caption>\n    * @param {string} value\n    * @param {BrMaskModel} config\n    * @returns {string} string money\n    */\n    BrMaskDirective.prototype.moneyMask = function (value, config) {\n        var decimal = config.decimal || this.brmasker.decimal;\n        value = value\n            .replace(/\\D/gi, '')\n            .replace(new RegExp('([0-9]{' + decimal + '})$', 'g'), config.decimalCaracter + '$1');\n        if (value.length === 1 && !this.brmasker.moneyInitHasInt) {\n            var dec = Array(decimal - 1).fill(0);\n            return \"0\" + config.decimalCaracter + dec.join('') + value;\n        }\n        if (value.length === decimal + 1) {\n            return '0' + value;\n        }\n        else if (value.length > decimal + 2 && value.charAt(0) === '0') {\n            return value.substr(1);\n        }\n        if (config.thousand && value.length > (Number(4) + Number(config.decimal))) {\n            var valueOne = \"([0-9]{3})\" + config.decimalCaracter + \"([0-9]{\" + config.decimal + \"}$)\";\n            value = value.replace(new RegExp(\"\" + valueOne, \"g\"), config.thousand + \"$1\" + config.decimalCaracter + \"$2\");\n        }\n        if (config.thousand && value.length > (Number(8) + Number(config.decimal))) {\n            var valueTwo = \"([0-9]{3})\" + config.thousand + \"([0-9]{3})\" + config.decimalCaracter + \"([0-9]{\" + config.decimal + \"}$)\";\n            value = value.replace(new RegExp(\"\" + valueTwo, \"g\"), config.thousand + \"$1\" + config.thousand + \"$2\" + config.decimalCaracter + \"$3\");\n        }\n        return value;\n    };\n    /**\n    * Responsible for returning the empty mask\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.onInput(string)</caption>\n    * @param {string} value\n    * @returns {string} value\n    */\n    BrMaskDirective.prototype.onInput = function (value) {\n        return this.formatField(value, this.brmasker.mask, this.brmasker.len);\n    };\n    /**\n    * Responsible for special characters\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.usingSpecialCharacters(string)</caption>\n    * @param {string} field\n    * @param {string} mask\n    * @param {number} size\n    * @returns {string} value\n    */\n    BrMaskDirective.prototype.usingSpecialCharacters = function (field, mask, size) {\n        if (!size) {\n            size = 99999999999;\n        }\n        var boleanoMascara;\n        var exp = /\\-|\\.|\\,| /gi;\n        var campoSoNumeros = field.toString().replace(exp, '');\n        var posicaoCampo = 0;\n        var NovoValorCampo = '';\n        var sizeMascara = campoSoNumeros.length;\n        for (var i = 0; i < sizeMascara; i++) {\n            if (i < size) {\n                boleanoMascara = ((mask.charAt(i) === '-') || (mask.charAt(i) === '.') || (mask.charAt(i) === ','));\n                if (boleanoMascara) {\n                    NovoValorCampo += mask.charAt(i);\n                    sizeMascara++;\n                }\n                else {\n                    NovoValorCampo += campoSoNumeros.charAt(posicaoCampo);\n                    posicaoCampo++;\n                }\n            }\n        }\n        return NovoValorCampo;\n    };\n    /**\n    * Responsible formating number\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.thousand(string)</caption>\n    * @param {string} value\n    */\n    BrMaskDirective.prototype.thousand = function (value) {\n        var val = value.replace(/\\D/gi, '');\n        var reverse = val.toString().split('').reverse().join('');\n        var thousands = reverse.match(/\\d{1,3}/g);\n        if (thousands) {\n            return thousands.join(\"\" + (this.brmasker.thousand || '.')).split('').reverse().join('');\n        }\n    };\n    /**\n    * Responsible for removing special characters\n    * @author Antonio Marques <tmowna@gmail.com>\n    * @example <caption>this.formatField(string)</caption>\n    * @param {string} field\n    * @param {string} mask\n    * @param {number} size\n    * @returns {string} value\n    */\n    BrMaskDirective.prototype.formatField = function (field, mask, size) {\n        if (!size) {\n            size = 99999999999;\n        }\n        var boleanoMascara;\n        var exp = /\\_|\\-|\\.|\\/|\\(|\\)|\\,|\\*|\\+|\\@|\\#|\\$|\\&|\\%|\\:| /gi;\n        var campoSoNumeros = field.toString().replace(exp, '');\n        var posicaoCampo = 0;\n        var NovoValorCampo = '';\n        var TamanhoMascara = campoSoNumeros.length;\n        for (var i = 0; i < TamanhoMascara; i++) {\n            if (i < size) {\n                boleanoMascara = (mask.charAt(i) === '-') || (mask.charAt(i) === '.') || (mask.charAt(i) === '/');\n                boleanoMascara = boleanoMascara || mask.charAt(i) === '_';\n                boleanoMascara = boleanoMascara || ((mask.charAt(i) === '(') || (mask.charAt(i) === ')') || (mask.charAt(i) === ' '));\n                boleanoMascara = boleanoMascara || ((mask.charAt(i) === ',') || (mask.charAt(i) === '*') || (mask.charAt(i) === '+'));\n                boleanoMascara = boleanoMascara || ((mask.charAt(i) === '@') || (mask.charAt(i) === '#') || (mask.charAt(i) === ':'));\n                boleanoMascara = boleanoMascara || ((mask.charAt(i) === '$') || (mask.charAt(i) === '&') || (mask.charAt(i) === '%'));\n                if (boleanoMascara) {\n                    NovoValorCampo += mask.charAt(i);\n                    TamanhoMascara++;\n                }\n                else {\n                    NovoValorCampo += campoSoNumeros.charAt(posicaoCampo);\n                    posicaoCampo++;\n                }\n            }\n        }\n        return NovoValorCampo;\n    };\n    return BrMaskDirective;\n}());\nexport { BrMaskDirective };\nBrMaskDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[brmasker]'\n            },] },\n    { type: Injectable },\n];\n/** @nocollapse */\nBrMaskDirective.ctorParameters = function () { return [\n    { type: FormGroupDirective, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n    { type: ElementRef, },\n]; };\nBrMaskDirective.propDecorators = {\n    'brmasker': [{ type: Input },],\n    'formControlName': [{ type: Input },],\n    'inputKeyup': [{ type: HostListener, args: ['keyup', ['$event'],] },],\n};\n//# sourceMappingURL=br-mask.js.map","export * from './br-mask';\n//# sourceMappingURL=index.js.map","export * from './app.module';\nexport * from './directives';\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}